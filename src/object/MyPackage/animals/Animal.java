package object.MyPackage.animals;

/**
 * Java 包(package)
 * 为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。
 * <p>
 * 包的作用
 * 1、把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。
 * 2、如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。
 * 3、包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。
 * Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。
 * <p>
 * 包语句的语法格式为：
 * package pkg1[．pkg2[．pkg3…]];
 * 例如,一个Something.java 文件它的内容
 * <p>
 * package net.java.util;
 * public class Something{
 * ...
 * }
 * 那么它的路径应该是 net/java/util/Something.java 这样保存的。 package(包) 的作用是把不同的 java 程序分类保存，更方便的被其他 java 程序调用。
 * <p>
 * 一个包（package）可以定义为一组相互联系的类型（类、接口、枚举和注释），为这些类型提供访问保护和命名空间管理的功能。
 * <p>
 * 以下是一些 Java 中的包：
 * java.lang-打包基础的类
 * java.io-包含输入输出功能的函数
 * 开发者可以自己把一组类和接口等打包，并定义自己的包。而且在实际开发中这样做是值得提倡的，当你自己完成类的实现之后，将相关的类分组，可以让其他的编程者更容易地确定哪些类、接口、枚举和注释等是相关的。
 * <p>
 * 由于包创建了新的命名空间（namespace），所以不会跟其他包中的任何名字产生命名冲突。使用包这种机制，更容易实现访问控制，并且让定位相关类更加简单。
 */
interface Animal {
    public void eat();

    public void travel();
}
